# Introduction
<<<<<<< HEAD
About emojidex
--------------
emojidex is the worlds first emoji-as-a-service provider as well as an extremely Open Source 
friendly set of tools and assets. We appreciate your interest in emojidex and want 
you to know that the vast majority of profit from emojidex are used to support a variety of Open 
Source software projects, educational material development and scientific / engineering projects.
By using emojidex in your project you are helping support Open Source, global education, and a 
variety of good and interesting scientific and engineering causes.

This Document (Fixes/Ammendments)
---------------------------------
The source for this document can be found [here](https://github.com/emojidex/slate).  
Amemendments and fixes are welcome! Please either fork/fix/push/pull requet or submit an issue 
on github if you find anything lacking or requiring a cleaner/better explanation.

The emojidex Service
--------------------
emojidex is primarily based around the [emojidex service](https://www.emojidex.com). This service
offers an API with listing, search and registration services. Some services require a token to 
access [registration for example] or for certain types of access [search with over 100 results 
per page and other queries that could be overused]. These limitations are only to prevent abuse 
or overuse of the system.

emojidex Tools and Clients
--------------------------
emojidex offers a set of clients and tools that can be found in the 
[emojidex organization](https://github.com/emojidex/) on github. The core tool and model for 
emojidex is the [emojidex gem for Ruby](https://github.com/emojidex/emojidex). This is the basis 
of not only online and backend tools but also the majority of the tools for emojidex such as the 
converter and the desktop client/editor. For Java/Android there's 
[emojidex android](https://github.com/emojidex/emojidex). 

emojidex on a Web Site
----------------------
The [emojidex Coffee](https://github.com/emojidex/emojidex-coffee) client is a front end client 
and tool set, developed in Coffee Script, and distributed as a jQuery plug-in. Using emojidex 
to automatically convert emoji character codes on your web site and use emoji assets in or as
widgets, and to enter and parse text with emoji is made as easy as simple as possible. All emoji 
are obtained from the content delivery network for the emojidex Service so you don't need to 
cache any emoji on your server or worry about any assets or images on your own server.
=======

Welcome to the Kittn API! You can use our API to access Kittn API endpoints, which can get information on various cats, kittens, and breeds in our database.

We have language bindings in Shell, Ruby, and Python! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.

This example API documentation page was created with [Slate](http://github.com/tripit/slate). Feel free to edit it and use it as a base for your own API's documentation.

# Authentication

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: meowmeowmeow"
```

> Make sure to replace `meowmeowmeow` with your API key.

Kittn uses API keys to allow access to the API. You can register a new Kittn API key at our [developer portal](http://example.com/developers).

Kittn expects for the API key to be included in all API requests to the server in a header that looks like the following:

`Authorization: meowmeowmeow`

<aside class="notice">
You must replace <code>meowmeowmeow</code> with your personal API key.
</aside>

# Kittens

## Get All Kittens

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get()
```

```shell
curl "http://example.com/api/kittens"
  -H "Authorization: meowmeowmeow"
```

> The above command returns JSON structured like this:

```json
[
  {
    "id": 1,
    "name": "Fluffums",
    "breed": "calico",
    "fluffiness": 6,
    "cuteness": 7
  },
  {
    "id": 2,
    "name": "Max",
    "breed": "unknown",
    "fluffiness": 5,
    "cuteness": 10
  }
]
```

This endpoint retrieves all kittens.

### HTTP Request

`GET http://example.com/api/kittens`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
include_cats | false | If set to true, the result will also include cats.
available | true | If set to false, the result will include kittens that have already been adopted.

<aside class="success">
Remember â€” a happy kitten is an authenticated kitten!
</aside>

## Get a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get(2)
```

```shell
curl "http://example.com/api/kittens/2"
  -H "Authorization: meowmeowmeow"
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "name": "Max",
  "breed": "unknown",
  "fluffiness": 5,
  "cuteness": 10
}
```

This endpoint retrieves a specific kitten.

<aside class="warning">If you're not using an administrator API key, note that some kittens will return 403 Forbidden if they are hidden for admins only.</aside>

### HTTP Request

`GET http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to retrieve
>>>>>>> upstream/master

